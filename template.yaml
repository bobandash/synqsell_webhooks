AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  synqsellsam

  SAM Template For all Lambda Functions related to SynqSell

# TODO: Remove the default values for the params for prod
# Run the following commands
# sam validate
# sam deploy
Parameters:
  EventBusArn:
    Type: String
    Description: "The ARN of the Shopify Event Bus"
    Default: arn:aws:events:us-east-2:149536473043:event-bus/aws.partner/shopify.com/153436192769/aws

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC where the Lambda function will be deployed
    Default: vpc-060b0240b06df08e3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the first private subnet for the Lambda function
    Default: subnet-0957f80f9ece54aa9

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the second private subnet for the Lambda function
    Default: subnet-06f0167a3889fd4a8

  PrivateSubnet3:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the third private subnet for the Lambda function
    Default: subnet-0cb1a9ce0ee9734d1

  # SecretArn:
  #   Type: String
  #   Description: The Secrets Manager storing the database credentials
  #   Default: "arn:aws:secretsmanager:us-east-2:149536473043:secret:rds-db-credentials/synqsell-db-dev/postgres/1726084554591-8nmsnc"

  RdsSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ID of the security group attached to your RDS instance
    Default: "sg-0e57c57cae80c1172"

  ShopifySourceName:
    Type: String
    Description: The source name for Shopify Events
    Default: "shopify"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
# TODO: change environments to secrets manager
Globals:
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Shopify-Shop-Domain,X-Shopify-Hmac-SHA256'"
      AllowOrigin: "'https://*.myshopify.com'"
      MaxAge: "'300'"
  Function:
    Timeout: 3
    Environment:
      Variables:
        SECRET_MANAGER_ID: "1726084554591"
        DB_USER: "postgres"
        DB_PASSWORD: "game78910"
        DB_HOST: "synqsell-db-dev.cd0y4ii40cdb.us-east-2.rds.amazonaws.com"
        DB_PORT: "5432"
        DATABASE: "postgres"
    LoggingConfig:
      LogFormat: JSON
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref RdsSecurityGroupId

  RdsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RdsSecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  # CarrierServiceFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: carrierService/
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs20.x
  #     Architectures:
  #       - x86_64
  #     Events:
  #       CarrierService:
  #         Type: Api
  #         Properties:
  #           Path: /carrier-service
  #           Method: post
  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: es2020
  #       Sourcemap: true
  #       EntryPoints:
  #         - app.ts

  # PRODUCTS/DELETE WEBHOOK SHOPIFY
  ProductsDeleteRule:
    Type: AWS::Events::Rule
    Properties:
      Name: products_delete_rule
      EventPattern:
        detail-type:
          - "shopifyWebhook"
        detail:
          metadata:
            X-Shopify-Topic:
              - prefix: "products/delete"
      EventBusName: !Ref EventBusArn
      Targets:
        - Arn: !GetAtt DeleteProductsFunction.Arn
          Id: "DeleteProductsFunctionTarget"

  DeleteProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: synqsell_products_delete
      CodeUri: deleteProducts/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ProductsDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteProductsFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ProductsDeleteRule.Arn

  # PRODUCTS/UPDATE WEBHOOK SHOPIFY
  ProductsUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      Name: products_update_rule
      EventPattern:
        detail-type:
          - "shopifyWebhook"
        detail:
          metadata:
            X-Shopify-Topic:
              - prefix: "products/update"
      EventBusName: !Ref EventBusArn
      Targets:
        - Arn: !GetAtt ProductsUpdateFunction.Arn
          Id: "ProductsUpdateFunctionTarget"

  ProductsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: synqsell_products_update
      CodeUri: productsUpdate/
      Handler: app.lambdaHandler
      MemorySize: 1028
      Timeout: 30
      Runtime: nodejs20.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ProductsUpdatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductsUpdateFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ProductsUpdateRule.Arn

  # FulfillmentOrdersOrderRoutingCompleteFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: synqsell_fulfillment_orders_order_routing_complete
  #     CodeUri: fulfillmentOrdersOrderRoutingComplete/
  #     Handler: app.lambdaHandler
  #     MemorySize: 1028
  #     Timeout: 30
  #     Runtime: nodejs20.x
  #     Architectures:
  #       - x86_64
  #     Events:
  #       ShopifyProductDeleteTrigger:
  #         Type: EventBridgeRule
  #         Properties:
  #           Pattern:
  #             detail-type:
  #               - "shopifyWebhook"
  #             detail:
  #               metadata:
  #                 X-Shopify-Topic:
  #                   - prefix: "fulfillment_orders/order_routing_complete"
  #           EventBusName: !Ref EventBusArn
  #           RuleName: order_routing_complete_webhook
  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: es2020
  #       Sourcemap: true
  #       EntryPoints:
  #         - app.ts
